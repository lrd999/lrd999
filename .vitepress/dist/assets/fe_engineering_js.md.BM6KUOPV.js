import{_ as a,c as i,o as n,ag as e}from"./chunks/framework.BZemHgQ6.js";const c=JSON.parse('{"title":"JS 工程化","description":"","frontmatter":{},"headers":[],"relativePath":"fe/engineering/js.md","filePath":"fe/engineering/js.md"}'),l={name:"fe/engineering/js.md"};function t(p,s,h,r,k,d){return n(),i("div",null,s[0]||(s[0]=[e(`<h1 id="js-工程化" tabindex="-1">JS 工程化 <a class="header-anchor" href="#js-工程化" aria-label="Permalink to &quot;JS 工程化&quot;">​</a></h1><h2 id="兼容性" tabindex="-1">兼容性 <a class="header-anchor" href="#兼容性" aria-label="Permalink to &quot;兼容性&quot;">​</a></h2><p>随着 ECMAScript 的不断更新，js 的功能越来越强大，而有些客户的浏览器版本十分老旧，无法支持一些 js 的新特性，而开发者往往想使用新特性进行开发，这时就需要对代码进行兼容性处理，使代码可以运行在较旧版本的浏览器中。</p><p>常用的工具有 babel 和 core-js。</p><h3 id="转译器-transpilers" tabindex="-1">转译器（Transpilers） <a class="header-anchor" href="#转译器-transpilers" aria-label="Permalink to &quot;转译器（Transpilers）&quot;">​</a></h3><p>转译器是一种可以将源码转译成另一种源码的特殊的软件。它可以解析现代代码，并使用旧的语法结构对其进行重写，进而使其也可以在旧的引擎中工作。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 在运行转译器之前</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> username</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> serverData.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">??</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;游客&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 在运行转译器之后</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> username</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> serverData.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> undefined</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> serverData.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> serverData.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;游客&#39;</span></span></code></pre></div><p><a href="https://www.babeljs.cn/" target="_blank" rel="noreferrer">babel</a> 是最著名的转译器之一。</p><h3 id="垫片-polyfills" tabindex="-1">垫片（Polyfills） <a class="header-anchor" href="#垫片-polyfills" aria-label="Permalink to &quot;垫片（Polyfills）&quot;">​</a></h3><p>新的语言特性可能不仅包括语法结构和运算符，还可能包括内建函数。</p><p>由于我们谈论的是新函数，而不是语法更改，因此无需在此处转译任何内容。我们只需要声明缺失的函数。</p><p>更新/添加新函数的脚本被称为“polyfill”。它“填补”了空白并添加了缺失的实现。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 如果没有这个函数</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Math.trunc) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 实现它</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Math.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">trunc</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> number </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Math.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ceil</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(number) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Math.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">floor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(number)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><a href="https://www.npmjs.com/package/core-js" target="_blank" rel="noreferrer">core-js</a> 是一个流行的 polyfill 库。</p><h3 id="browserslist" tabindex="-1">browserslist <a class="header-anchor" href="#browserslist" aria-label="Permalink to &quot;browserslist&quot;">​</a></h3><p><code>browserslist</code> 是一个工具，用来指定需要兼容的浏览器范围，一些常用的工具都会读取它的配置。<a href="https://browsersl.ist/" target="_blank" rel="noreferrer">查看语法及浏览器兼容范围</a>。</p><p>需要在 <code>package.json</code> 中指定：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;browserslist&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;defaults and fully supports es6-module&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre></div><p>或者在根目录中添加 <code>.browserslistrc</code> 配置文件：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># Browsers that we support</span></span>
<span class="line"><span></span></span>
<span class="line"><span>defaults and fully supports es6-module</span></span></code></pre></div><h2 id="质量" tabindex="-1">质量 <a class="header-anchor" href="#质量" aria-label="Permalink to &quot;质量&quot;">​</a></h2><h2 id="风格" tabindex="-1">风格 <a class="header-anchor" href="#风格" aria-label="Permalink to &quot;风格&quot;">​</a></h2>`,22)]))}const g=a(l,[["render",t]]);export{c as __pageData,g as default};
